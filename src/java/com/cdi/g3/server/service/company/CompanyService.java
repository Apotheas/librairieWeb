/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cdi.g3.server.service.company;

import com.cdi.g3.common.exception.CheckException;
import com.cdi.g3.common.exception.CreateException;
import com.cdi.g3.common.exception.FinderException;
import com.cdi.g3.common.exception.ObjectNotFoundException;
import com.cdi.g3.common.exception.RemoveException;
import com.cdi.g3.common.exception.UpdateException;
import com.cdi.g3.common.logging.Trace;
import com.cdi.g3.server.domain.company.Company;
import com.cdi.g3.server.domain.company.CompanyDAO;
import com.cdi.g3.server.service.AbstractService;
import java.util.Collection;

/**
 *
 * @author Izet
 */
public class CompanyService extends AbstractService{
    
    
      // ======================================
    // = Attributes =
    // ======================================
    private static final CompanyDAO _dao = new CompanyDAO();

    // ======================================
    // = Constructors =
    // ======================================
    public CompanyService(){
        
    }

    // ======================================
    // = Business methods =
    // ======================================
    public Company createCompany( final Company company ) throws CreateException, CheckException {
        final String mname = "createCompany";
        Trace.entering( _cname, mname, company );

        if ( company == null )
            throw new CreateException( "Company object is null" );
        
        company.checkData();
//         Company  company1 = null ;
        try {
           _dao.findByPrimaryKey(company.getId());
        } catch (ObjectNotFoundException ex) {
             //checkId( company.getId() );
            checkId( company.getId());
             // Creates the object
            _dao.insert( company );
            return company;
        }
        Trace.exiting( _cname, mname, company );
        throw new CreateException( "Company object exist" );
        
    }

    public Company findCompany( final String companyId ) throws FinderException, CheckException {
        final String mname = "findCompany";
        Trace.entering( _cname, mname, companyId );

        checkId( companyId );
        // Finds the object
        final Company company = (Company) _dao.findByPrimaryKey( companyId );
        Trace.exiting( _cname, mname, company );
        return company;
    }

    public void deleteCompany( final String companyId ) throws RemoveException, CheckException {
        final String mname = "deleteCompany";
        Trace.entering( _cname, mname, companyId );

        checkId( companyId );

        // Checks if the object exists
        try {
            _dao.findByPrimaryKey( companyId );
        } catch ( FinderException e ) {
            throw new RemoveException( "Company must exist to be deleted" );
        }

        // Deletes the object
        try {
            _dao.remove(companyId);
        } catch ( ObjectNotFoundException e ) {
            throw new RemoveException( "Company must exist to be deleted" );
        }
    }

    public void updateCompany(Company company  ) throws UpdateException, CheckException {
        final String mname = "updateCompany";
        Trace.entering( _cname, mname, company );

        if ( company == null )
            throw new UpdateException( "Company object is null" );

        checkId( company.getId() );

       final Company companyFinded;

        // Checks if the object exists
        try {
            companyFinded = (Company) _dao.findByPrimaryKey( company.getId() );
        } catch ( FinderException e ) {
            throw new UpdateException( "Company must exist to be updated" );
        }
        
        company.checkData();
        company = setCompany(company, companyFinded );
        

        // Updates the object
        try {
            _dao.update( companyFinded );
        } catch ( ObjectNotFoundException e ) {
            throw new UpdateException( "Company must exist to be updated" );
        }
    }

    public Collection findCompany() throws FinderException {
        
        final String mname = "findCompany";
        Trace.entering( _cname, mname );

        // Finds all the objects
        final Collection company = _dao.findAll();
        
        Trace.exiting( _cname, mname, new Integer( company.size() ) );
        return company;
    }

    // ======================================
    // = Private Methods =
    // ======================================
     private Company setCompany(Company company, Company companyFinded ){
         return null;
     }

    /**
     * This method returns a unique identifer generated by the system.
     * 
     * @return a unique identifer
     */
    public final String getUniqueId() {
        return _dao.getUniqueId();
    }

}


